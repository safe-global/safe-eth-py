name: Python CI
on:
  push:
    branches:
      - main
      - develop
  pull_request:
  release:
    types: [ released ]


jobs:
  linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '.pre-commit-config.yaml'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install dependencies
        run: pip install -U pre-commit -r requirements-test.txt
      - name: Run pre-commit
        run: pre-commit run --all-files

  test-app:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", 3.11, 3.12, 3.13]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Create Ganache network
      run: docker network create ganache
    - name: Setup and run ganache
      run: docker run --detach --publish 8545:8545 --network ganache -e DOCKER=true trufflesuite/ganache:latest --defaultBalanceEther 10000 --gasLimit 10000000 -a 30 --chain.chainId 1337 --chain.networkId 1337 -d
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'
    - name: Install dependencies
      run:
        pip install -r requirements-test.txt coveralls
      env:
        PIP_USE_MIRRORS: true
    - name: Run tests and coverage
      run: coverage run --source=$SOURCE_FOLDER -m pytest -W ignore::DeprecationWarning -rxXs --reruns 3
      env:
        SOURCE_FOLDER: safe_eth
        DJANGO_SETTINGS_MODULE: config.settings.test
        ETHEREUM_MAINNET_NODE: ${{ secrets.ETHEREUM_MAINNET_NODE }}
        ETHEREUM_POLYGON_NODE: ${{ secrets.ETHEREUM_POLYGON_NODE }}
        ETHEREUM_4337_BUNDLER_URL: ${{ secrets.ETHEREUM_4337_BUNDLER_URL }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        ENS_CLIENT_API_KEY: ${{ secrets.ENS_CLIENT_API_KEY }}
        SAFE_TRANSACTION_SERVICE_API_KEY: ${{ secrets.SAFE_TRANSACTION_SERVICE_API_KEY }}
    - name: Send results to coveralls
      # Ignore coveralls issues
      continue-on-error: true
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for coveralls
    - name: Test packaging
      run: |
        python -m pip install --upgrade build
        python -m build

  publish:
    runs-on: ubuntu-latest
    needs:
      - linting
      - test-app
    if: (github.event_name == 'release' && github.event.action == 'released')
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Deploy Package
      run: |
        python -m pip install --upgrade build twine
        python -m build
        twine check dist/*
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
